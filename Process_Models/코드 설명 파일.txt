Process_Optimization : 유전 알고리즘을 기반으로, 기본 Baseline 파일을 응용한 모델
Process_Optimization_with_Keras : 위 모델을 Keras로 새롭게 구현한 모델
DQN_Models : DQN 알고리즘을 기반으로 새롭게 설계한 모델

< Process_Optimization >
Genome.py : 유전 알고리즘의 게놈과 관련된 py 파일로 Genome 클래스가 정의되어 있음. 유전 알고리즘의 신경망이 설계되어 있음
 - def __init__(self)
 - def update_mask(self)
 - def forward(self, inputs)
 - def sigmoid(self, x), softmax(self, x), linear(self, x)
 - def create_order(self, order)
 - def predict(self, order)
 - def genome_score(genome)

Simulator.py : 공정 과정과 관련된 py 파일로 Simulator 클래스가 정의되어 있음. 공정 과정에서 score 계산, change와 stop과 같은 이벤트와 관련된 함수 존재
 - def __init__(self)
 - def make_init(self)
 - def cal_prt_mol(self, machine_name)
 - def cal_blk(self)
 - def cal_change_stop_time(self)
 - def make_stock_df(self)
 - def get_score(self, df)

main.ipynb : 앞에서 정의한 두 파일에 있는 genome과 simulator 객체를 불러와서 유전 알고리즘 기반의 신경망 모델을 학습시키고 결과를 반환, 이 때 한 epoch에서 best값이 전체 epoch에서 best값보다 클 경우, 이를 갱신시키고, 작을 경우 갱신시키지 않음
 - import library
 - Feature Engineering & Initial Modeling
 - Model Tuning & Evaluation
 - Conclusion & Discussion

< DQN_Models >
Dqn.py : DQN을 이용하여 단순 mlp모델을 학습시키는 방법으로 submission을 계산함
Class Env : 각 step마다 predict한 값을 받아서 reward를 반환
Reward: blk_diff에 해당
Model: 3단 mlp 모델로, loss= mae, activation 함수는 linear, sigmoid, softmax를 사용함